codesys:
    BOOL:                 # CODESYS
        - uint8_t         # C++
        - bool            # ROS
        - std_msgs::Bool  # ROS msg
    BYTE:
        - uint8_t
        - byte
        - std_msgs::Byte
    SINT:
        - int8_t
        - int8
        - std_msgs::Int8
    USINT:
        - uint8_t
        - uint8
        - std_msgs::UInt8
    INT:
        - int16_t
        - int16
        - std_msgs::Int16
    UINT:
        - uint16_t
        - uint16
        - std_msgs::UInt16
    DINT:
        - int32_t
        - int32
        - std_msgs::Int32
    UDINT:
        - uint32_t
        - uint32
        - std_msgs::UInt32
    LINT:
        - int64_t
        - int64
        - std_msgs::Int64
    ULINT:
        - uint64_t
        - uint64
        - std_msgs::UInt64
    REAL:
        - float
        - float32
        - std_msgs::Float32
    LREAL:
        - double
        - float64
        - std_msgs::Float64
    string:
        - char[{size}]
        - string
        - std_msgs::String
    #TODO CHAR
    #TODO ColorRGBA
    #TODO Duration, Time
    #TODO? Empty

ros:
    std_msgs:
        - Bool
        - Byte
        - ByteMultiArray
        - Char
        - ColorRGBA
        - Duration
        - Empty
        - Float32
        - Float32MultiArray
        - Float64
        - Float64MultiArray
        - Header
        - Int16
        - Int16MultiArray
        - Int32
        - Int32MultiArray
        - Int64
        - Int64MultiArray
        - Int8
        - Int8MultiArray
        - MultiArrayDimension
        - MultiArrayLayout
        - String
        - Time
        - UInt16
        - UInt16MultiArray
        - UInt32
        - UInt32MultiArray
        - UInt64
        - UInt64MultiArray
        - UInt8
        - UInt8MultiArray

    geometry_msgs:
        - Accel
        - AccelStamped
        - AccelWithCovariance
        - AccelWithCovarianceStamped
        - Inertia
        - InertiaStamped
        - Point
        - Point32
        - PointStamped
        - Polygon
        - PolygonStamped
        - Pose
        - Pose2D
        - PoseArray
        - PoseStamped
        - PoseWithCovariance
        - PoseWithCovarianceStamped
        - Quaternion
        - QuaternionStamped
        - Transform
        - TransformStamped
        - Twist
        - TwistStamped
        - TwistWithCovariance
        - TwistWithCovarianceStamped
        - Vector3
        - Vector3Stamped
        - Wrench
        - WrenchStamped
    
#TODO actionlib_msgs, etc.

spec_tpls:
    string:
        write: |-
            
            // strings
            template<> void RobinPublisher<{cpp_type}, std_msgs::String>::read()
            {{
              // char[] to std::string
              msg_.data = *shm_ptr_;
            }}
        read: |-
            
            template<> void RobinSubscriber<{cpp_type}, std_msgs::String>::write(std_msgs::String const *msg_ptr)
            {{
              // std::string to char[]
              std::snprintf(*shm_ptr_, sizeof(*shm_ptr_), "%s", msg_ptr->data.c_str());
            }}
    array:
        write: |-
            
            // fixed length pod arrays
            template<> void RobinPublisher<{cpp_type}, {msg_type}>::read()
            {{
              // pod array to boost::array (fixed length)
              std::memcpy(msg_.data.data(), *shm_ptr_, sizeof(*shm_ptr_));
            }}
        read: |-
            
            template<> void RobinSubscriber<{cpp_type}, {msg_type}>::write({msg_type} const *msg_ptr)
            {{
              // boost::array to pod array
              std::memcpy(*shm_ptr_, msg_ptr->data.data(), sizeof(*shm_ptr_));
            }}
    vlarray:
        write: |-
            
            // variable length pod arrays
            template<> void RobinPublisher<{cpp_type}, {msg_type}>::read()
            {{
              // pod array to std::vector
              size_t const shm_len = sizeof(*shm_ptr_) / sizeof({base_cpp_type});
              msg_.data.assign(*shm_ptr_, *shm_ptr_ + shm_len);
            }}
        read: |-
            
            template<> void RobinSubscriber<{cpp_type}, {msg_type}>::write({msg_type} const *msg_ptr)
            {{
              // std::vector to pod array
              size_t const shm_len = sizeof(*shm_ptr_) / sizeof({base_cpp_type});
              size_t msg_len = std::min(msg_ptr->data.size(), shm_len);
              std::memcpy(*shm_ptr_, msg_ptr->data.data(), sizeof({base_cpp_type}) * msg_len);
              zeroUnsentElements(*shm_ptr_, msg_len, shm_len);
            }}
